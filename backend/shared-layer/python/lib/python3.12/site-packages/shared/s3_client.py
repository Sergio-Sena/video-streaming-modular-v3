import boto3
from botocore.exceptions import ClientError
from typing import Dict, Any, Optional, List

class S3Client:
    def __init__(self, bucket_name: str):
        self.s3 = boto3.client('s3')
        self.bucket_name = bucket_name
    
    async def upload_file(self, file_content: bytes, key: str, metadata: Optional[Dict[str, str]] = None) -> bool:
        try:
            extra_args = {}
            if metadata:
                extra_args['Metadata'] = metadata
            
            self.s3.put_object(
                Bucket=self.bucket_name,
                Key=key,
                Body=file_content,
                **extra_args
            )
            return True
        except ClientError as e:
            raise Exception(f"Failed to upload file: {str(e)}")
    
    def upload_file_sync(self, file_content: bytes, key: str, metadata: Optional[Dict[str, str]] = None) -> bool:
        """Synchronous version"""
        try:
            extra_args = {}
            if metadata:
                extra_args['Metadata'] = metadata
            
            self.s3.put_object(
                Bucket=self.bucket_name,
                Key=key,
                Body=file_content,
                **extra_args
            )
            return True
        except ClientError as e:
            raise Exception(f"Failed to upload file: {str(e)}")
    
    async def get_file(self, key: str) -> bytes:
        try:
            response = self.s3.get_object(Bucket=self.bucket_name, Key=key)
            return response['Body'].read()
        except ClientError as e:
            raise Exception(f"Failed to get file: {str(e)}")
    
    def get_file_sync(self, key: str) -> bytes:
        """Synchronous version"""
        try:
            response = self.s3.get_object(Bucket=self.bucket_name, Key=key)
            return response['Body'].read()
        except ClientError as e:
            raise Exception(f"Failed to get file: {str(e)}")
    
    async def delete_file(self, key: str) -> bool:
        try:
            self.s3.delete_object(Bucket=self.bucket_name, Key=key)
            return True
        except ClientError as e:
            raise Exception(f"Failed to delete file: {str(e)}")
    
    def delete_file_sync(self, key: str) -> bool:
        """Synchronous version"""
        try:
            self.s3.delete_object(Bucket=self.bucket_name, Key=key)
            return True
        except ClientError as e:
            raise Exception(f"Failed to delete file: {str(e)}")
    
    async def list_files(self, prefix: str = "") -> List[Dict[str, Any]]:
        try:
            response = self.s3.list_objects_v2(
                Bucket=self.bucket_name,
                Prefix=prefix
            )
            return response.get('Contents', [])
        except ClientError as e:
            raise Exception(f"Failed to list files: {str(e)}")
    
    def list_files_sync(self, prefix: str = "") -> List[Dict[str, Any]]:
        """Synchronous version"""
        try:
            response = self.s3.list_objects_v2(
                Bucket=self.bucket_name,
                Prefix=prefix
            )
            return response.get('Contents', [])
        except ClientError as e:
            raise Exception(f"Failed to list files: {str(e)}")
    
    def generate_presigned_url(self, key: str, expiration: int = 3600, method: str = 'get_object') -> str:
        """Generate presigned URL for S3 object"""
        try:
            response = self.s3.generate_presigned_url(
                method,
                Params={'Bucket': self.bucket_name, 'Key': key},
                ExpiresIn=expiration
            )
            return response
        except ClientError as e:
            raise Exception(f"Failed to generate presigned URL: {str(e)}")
    
    def initiate_multipart_upload(self, key: str, content_type: str = 'application/octet-stream') -> str:
        """Initiate multipart upload"""
        try:
            response = self.s3.create_multipart_upload(
                Bucket=self.bucket_name,
                Key=key,
                ContentType=content_type
            )
            return response['UploadId']
        except ClientError as e:
            raise Exception(f"Failed to initiate multipart upload: {str(e)}")
    
    def upload_part(self, key: str, upload_id: str, part_number: int, data: bytes) -> str:
        """Upload a part in multipart upload"""
        try:
            response = self.s3.upload_part(
                Bucket=self.bucket_name,
                Key=key,
                PartNumber=part_number,
                UploadId=upload_id,
                Body=data
            )
            return response['ETag']
        except ClientError as e:
            raise Exception(f"Failed to upload part: {str(e)}")
    
    def complete_multipart_upload(self, key: str, upload_id: str, parts: List[Dict[str, Any]]) -> str:
        """Complete multipart upload"""
        try:
            response = self.s3.complete_multipart_upload(
                Bucket=self.bucket_name,
                Key=key,
                UploadId=upload_id,
                MultipartUpload={'Parts': parts}
            )
            return response['Location']
        except ClientError as e:
            raise Exception(f"Failed to complete multipart upload: {str(e)}")
    
    def abort_multipart_upload(self, key: str, upload_id: str) -> bool:
        """Abort multipart upload"""
        try:
            self.s3.abort_multipart_upload(
                Bucket=self.bucket_name,
                Key=key,
                UploadId=upload_id
            )
            return True
        except ClientError as e:
            raise Exception(f"Failed to abort multipart upload: {str(e)}")