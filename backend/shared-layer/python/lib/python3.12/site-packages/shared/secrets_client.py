import boto3
import json
import time
from typing import Dict, Any, Optional

class SecretsClient:
    def __init__(self):
        self.secrets_manager = boto3.client('secretsmanager')
        self.cache: Dict[str, Dict[str, Any]] = {}
        self.cache_ttl = 300  # 5 minutes
    
    async def get_secret(self, secret_name: str, key: Optional[str] = None) -> Any:
        cache_key = f"{secret_name}:{key}" if key else secret_name
        
        # Check cache
        if cache_key in self.cache:
            if time.time() - self.cache[cache_key]['timestamp'] < self.cache_ttl:
                return self.cache[cache_key]['value']
        
        # Fetch from Secrets Manager
        try:
            response = self.secrets_manager.get_secret_value(SecretId=secret_name)
            secret_data = json.loads(response['SecretString'])
            
            value = secret_data.get(key) if key else secret_data
            
            # Cache the result
            self.cache[cache_key] = {
                'value': value,
                'timestamp': time.time()
            }
            
            return value
            
        except Exception as e:
            raise Exception(f"Failed to get secret {secret_name}: {str(e)}")
    
    def get_secret_sync(self, secret_name: str, key: Optional[str] = None) -> Any:
        """Synchronous version for non-async contexts"""
        cache_key = f"{secret_name}:{key}" if key else secret_name
        
        # Check cache
        if cache_key in self.cache:
            if time.time() - self.cache[cache_key]['timestamp'] < self.cache_ttl:
                return self.cache[cache_key]['value']
        
        # Fetch from Secrets Manager
        try:
            response = self.secrets_manager.get_secret_value(SecretId=secret_name)
            secret_data = json.loads(response['SecretString'])
            
            value = secret_data.get(key) if key else secret_data
            
            # Cache the result
            self.cache[cache_key] = {
                'value': value,
                'timestamp': time.time()
            }
            
            return value
            
        except Exception as e:
            raise Exception(f"Failed to get secret {secret_name}: {str(e)}")